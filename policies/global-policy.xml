<policies>
  <inbound>
    <!-- Do not disturb below commented placeholder strings lines,as they are used in templates for mapping data -->
    <!-- <cors-placeholder/> -->
    <!-- <sensitive-placeholder/> -->
    <!-- Do not disturb above commented placeholder strings lines,as they are used in templates for mapping data -->
    <set-variable name="brandItems" value="{{brandHostMapping}}" />
    <set-variable name="defaultBrand" value="{{defaultSystemBrand}}" />
    <set-variable name="brand" value="@{
        var domainString = context.Request.OriginalUrl.Host.ToString();
        //var pattern1 = @"([\w\d\-]{2,}\.(?:co.uk|[\w]{2,}))$";
        //var pattern = @"([A-Za-z0-9-]+\.([A-Za-z]{3,}|[A-Za-z]{2}\.[A-Za-z]{2}|[A-za-z]{2}))(?!\.([A-Za-z]{3,}|[A-Za-z]{2}\.[A-Za-z]{2}|[A-za-z]{2}))\b";
        var pattern = @"([A-Za-z0-9-]+\.([A-Za-z]{3,}|[A-Za-z]{2}\.[A-Za-z]{2}|[A-za-z]{2}))$";
        var rootDomainRe = new Regex(pattern);
        if (rootDomainRe.IsMatch(domainString))
        {
            var domain = rootDomainRe.Match(domainString).Groups[1].Value;
            var refBrands = (string)context.Variables["brandItems"];
            var parsedBrandList = JObject.Parse(refBrands.Replace("\\", ""));
            if (parsedBrandList.ContainsKey(domain) == false){
              return (string)context.Variables["brandItems"];
            }
            return (string)parsedBrandList[domain];
        }
        return null;
    }" />
    <set-header name="x-brand-id" exists-action="override">
        <value>@(context.Variables.GetValueOrDefault<string>("brand"))</value>
    </set-header>
  </inbound>
    <backend>
        <forward-request />
    </backend>
  <outbound>
    <outbound>
    <base />
    <set-header name="Access-Control-Allow-Origin" exists-action="override">
      <value>@(context.Request.Headers.GetValueOrDefault("Origin",""))</value>
    </set-header>
    <set-header name="Access-Control-Allow-Credentials" exists-action="override">
      <value>true</value>
    </set-header>
  </outbound>
</policies>

